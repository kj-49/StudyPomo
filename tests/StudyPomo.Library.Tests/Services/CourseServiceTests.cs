using Moq;
using StudyPomo.Library.Data.Interfaces;
using StudyPomo.Library.Models.Identity;
using StudyPomo.Library.Models.Tables.CourseEntities;
using StudyPomo.Library.Services.Interfaces;
using StudyPomo.Library.Services;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Linq.Expressions;

namespace StudyPomo.Library.Tests.Services;

public class CourseServiceTests
{
    private readonly Mock<IUnitOfWork> _mockUnitOfWork;
    private readonly Mock<IUserService> _mockUserService;
    private readonly CourseService _service;

    public CourseServiceTests()
    {
        _mockUnitOfWork = new Mock<IUnitOfWork>();
        _mockUserService = new Mock<IUserService>();
        _service = new CourseService(_mockUnitOfWork.Object, _mockUserService.Object);
    }

    [Fact]
    public async Task ArchiveAsync_CourseExists_ArchivesCourse()
    {
        // Arrange
        var courseId = 1;
        var course = new Course { Id = courseId, Archived = false };
        _mockUnitOfWork.Setup(u => u.Course.GetAsync(
                                 It.IsAny<Expression<Func<Course, bool>>>(),
                                 It.IsAny<Expression<Func<Course, object>>[]>()))
                       .ReturnsAsync(course);

        // Act
        await _service.ArchiveAsync(courseId);

        // Assert
        Assert.True(course.Archived);
        _mockUnitOfWork.Verify(u => u.Course.Update(course), Times.Once);
        _mockUnitOfWork.Verify(u => u.Complete(), Times.Once);
    }

    [Fact]
    public async Task UnArchiveAsync_CourseExists_UnArchivesCourse()
    {
        // Arrange
        var courseId = 1;
        var course = new Course { Id = courseId, Archived = true };
        _mockUnitOfWork.Setup(u => u.Course.GetAsync(
                                 It.IsAny<Expression<Func<Course, bool>>>(),
                                 It.IsAny<Expression<Func<Course, object>>[]>()))
                       .ReturnsAsync(course);

        // Act
        await _service.UnArchiveAsync(courseId);

        // Assert
        Assert.False(course.Archived);
        _mockUnitOfWork.Verify(u => u.Course.Update(course), Times.Once);
        _mockUnitOfWork.Verify(u => u.Complete(), Times.Once);
    }

    [Fact]
    public async Task CreateAsync_ValidCourse_CreatesCourse()
    {
        // Arrange
        var courseCreate = new CourseCreate
        {
            Name = "Test Course",
            Description = "Test Description",
            HexColor = "#FFFFFF"
        };

        var user = new ApplicationUser { Id = 1 };
        _mockUserService.Setup(u => u.GetCurrentUserAsync()).ReturnsAsync(user);

        var createdCourse = new Course
        {
            Id = 1, // Assuming the course ID is generated by the database
            Name = courseCreate.Name,
            Description = courseCreate.Description,
            HexColor = courseCreate.HexColor,
            UserId = user.Id
        };

        // Set up the mock for AddAsync to return the created course
        _mockUnitOfWork.Setup(u => u.Course.AddAsync(It.IsAny<Course>()))
                       .ReturnsAsync(createdCourse);

        // Act
        await _service.CreateAsync(courseCreate);

        // Assert
        _mockUnitOfWork.Verify(u => u.Course.AddAsync(It.IsAny<Course>()), Times.Once);
        _mockUnitOfWork.Verify(u => u.Complete(), Times.Once);
    }

    [Fact]
    public async Task GetAllAsync_UserHasCourses_ReturnsAllCourses()
    {
        // Arrange
        var userId = 1;
        var courses = new List<Course>
            {
                new Course { UserId = userId, Archived = false },
                new Course { UserId = userId, Archived = false }
            };
        _mockUnitOfWork.Setup(u => u.Course.GetAllAsync(
                                 It.IsAny<Expression<Func<Course, bool>>>(),
                                 It.IsAny<Expression<Func<Course, object>>[]>()))
                       .ReturnsAsync(courses);

        // Act
        var result = await _service.GetAllAsync(userId);

        // Assert
        Assert.Equal(2, result.Count);
        _mockUnitOfWork.Verify(u => u.Course.GetAllAsync(
            It.IsAny<Expression<Func<Course, bool>>>(),
            It.IsAny<Expression<Func<Course, object>>[]>()), Times.Once);
    }

    [Fact]
    public async Task GetAsync_CourseExists_ReturnsCourse()
    {
        // Arrange
        var courseId = 1;
        var course = new Course { Id = courseId };
        _mockUnitOfWork.Setup(u => u.Course.GetAsync(
                                 It.IsAny<Expression<Func<Course, bool>>>(),
                                 It.IsAny<Expression<Func<Course, object>>[]>()))
                       .ReturnsAsync(course);

        // Act
        var result = await _service.GetAsync(courseId);

        // Assert
        Assert.Equal(courseId, result.Id);
        _mockUnitOfWork.Verify(u => u.Course.GetAsync(
            It.IsAny<Expression<Func<Course, bool>>>(),
            It.IsAny<Expression<Func<Course, object>>[]>()), Times.Once);
    }

    [Fact]
    public async Task RemoveAsync_CourseExists_RemovesCourse()
    {
        // Arrange
        var courseId = 1;
        var course = new Course { Id = courseId };
        _mockUnitOfWork.Setup(u => u.Course.GetAsync(
                                 It.IsAny<Expression<Func<Course, bool>>>()))
                       .ReturnsAsync(course);

        // Act
        await _service.RemoveAsync(courseId);

        // Assert
        _mockUnitOfWork.Verify(u => u.Course.Remove(course), Times.Once);
        _mockUnitOfWork.Verify(u => u.Complete(), Times.Once);
    }

    [Fact]
    public async Task UpdateAsync_CourseExists_UpdatesCourse()
    {
        // Arrange
        var courseUpdate = new CourseUpdate { Id = 1 /* other properties */ };
        var existingCourse = new Course { Id = 1 };
        _mockUnitOfWork.Setup(u => u.Course.GetAsync(
                                 It.IsAny<Expression<Func<Course, bool>>>()))
                       .ReturnsAsync(existingCourse);

        // Act
        await _service.UpdateAsync(courseUpdate);

        // Assert
        _mockUnitOfWork.Verify(u => u.Course.Update(It.IsAny<Course>()), Times.Once);
        _mockUnitOfWork.Verify(u => u.Complete(), Times.Once);
    }
}